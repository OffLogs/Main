@using OffLogs.Web.Services.Http
@using OffLogs.Web.Core.Models.Modal
@using Microsoft.AspNetCore.Components.Web
@using OffLogs.Web.Core.Components.Form
@using OffLogs.Web.Shared.Modal
@using OffLogs.Web.Shared.Ui
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using OffLogs.Web.Constants
@using OffLogs.Web.Services
@using OffLogs.Api.Common.Dto.RequestsAndResponses.Board.Application
@using OffLogs.Api.Common.Dto.Entities
@inject IApiService _apiService
@inject ToastService _toastService
@inject IApiService _apiService 

<MyButton @onclick="() => _isShowAddModal = true">Add Application</MyButton>
<ModalWindow
    IsShow="_isShowAddModal"
    Buttons="_modalButtons"
    IsLoading="_isLoading"
    OnClose="@(async () => { await Task.Yield(); _isShowAddModal = false; })"
    >
    <MyEditForm OnValidSubmit="@HandleSubmit" 
                EditContext="@_editContext"
                @ref="_editForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <p>
            <CustomInputText Label="Name:" @bind-Value="_model.Name" />
        </p>
    </MyEditForm>

</ModalWindow>

@code
{
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<ApplicationDto> OnAdded { get; set; }

    private AddRequest _model = new();
    private EditContext _editContext;
    private MyButton _btnSubmit;
    private MyEditForm _editForm;
    private bool _isLoading = false;

    private bool _isShowAddModal = false;

    private List<ModalButtonModel> _modalButtons = new ();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _editContext = new EditContext(_model);

        var saveBtnModel = new ModalButtonModel(
            "Add",
            OnAddAction
        );
        saveBtnModel.IsCloseAfterAction = false;
        _modalButtons.Add(saveBtnModel);
        _modalButtons.Add(new (
            "Cancel",
            null,
            BootstrapColorType.Light
        ));
    }

    private async Task HandleSubmit()
    {
        var isValid = _editContext.Validate();
        if (isValid)
        {
            _isLoading = true;
            try
            {
                var application = await _apiService.AddApplicationAsync(_model.Name);
                await OnAdded.InvokeAsync(application);
                _isShowAddModal = false;
                _toastService.AddInfoMessage("New application was added");
            }
            catch (Exception e)
            {
                _toastService.AddErrorMessage(e.Message);
            }
            finally
            {
                _isLoading = false;
            }
            StateHasChanged();
        }
    }

    private void OnAddAction()
    {
        _editForm.ClickAsync().Wait();
    }
}
