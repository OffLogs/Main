@using OffLogs.Web.Services.Http
@using OffLogs.Business.Common.Models.Api.Request
@using OffLogs.Web.Core.Models.Modal
@using Microsoft.AspNetCore.Components.Web
@using OffLogs.Web.Core.Constants
@using OffLogs.Web.Shared.Modal
@inject IApiService _apiService
@inject ToastService _toastService

<button @onclick="() => _isShowAddModal = true">Add Application</button>
<ModalWindow
    IsShow="_isShowAddModal"
    Buttons="_modalButtons"
    OnClose="@(async () => { await Task.Yield(); _isShowAddModal = false; })"
    >
    Wow this is body
</ModalWindow>

@code
{
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    
    private bool _isShowAddModal = false;
    
    private List<ModalButtonModel> _modalButtons = new ();
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var saveBtnModel = new ModalButtonModel(
            "Add",
            OnAddAction,
            "primary"
        );
        saveBtnModel.IsCloseAfterAction = false;
        _modalButtons.Add(saveBtnModel);
        _modalButtons.Add(new (
            "Cancel",
            null,
            "default"
            ));
        
        var applications = await _apiService.GetApplications(new PaginatedRequestModel()
        {
            Page = 1
        });
        
        _toastService.AddMessage(ToastMessageType.Error, "Test error");
    }

    private Task ShowAddModal(bool isShow = false)
    {
        Console.WriteLine("NN");
        _isShowAddModal = isShow;
        return Task.CompletedTask;
    }
    
    private void OnAddAction()
    {
        Console.WriteLine("OnAddAction");
    }
}
