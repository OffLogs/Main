@using OffLogs.Web.Services.Http
@using OffLogs.Web.Core.Models.Modal
@using Microsoft.AspNetCore.Components.Web
@using OffLogs.Web.Core.Components.Form
@using OffLogs.Web.Shared.Modal
@using OffLogs.Web.Shared.Ui
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using OffLogs.Web.Constants
@using OffLogs.Web.Services
@using OffLogs.Api.Common.Dto.RequestsAndResponses.Board.Application
@inject IApiService _apiService
@inject ToastService _toastService

<MyButton @onclick="() => _isShowAddModal = true">Add Application</MyButton>
<ModalWindow
    IsShow="_isShowAddModal"
    Buttons="_modalButtons"
    OnClose="@(async () => { await Task.Yield(); _isShowAddModal = false; })"
    >
    <EditForm Model="@_model" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <p>
            <CustomInputText Label="Name:" @bind-Value="_model.Name" />
        </p>
        <MyButton IsSubmit="true" IsHidden="true" @ref="_btnSubmit"></MyButton>
    </EditForm>

</ModalWindow>

@code
{
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    
    private AddRequest _model = new();
    private EditContext _editContext;
    private MyButton _btnSubmit;
    
    private bool _isShowAddModal = false;
    
    private List<ModalButtonModel> _modalButtons = new ();
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _editContext = new EditContext(_model);
        
        var saveBtnModel = new ModalButtonModel(
            "Add",
            OnAddAction
        );
        saveBtnModel.IsCloseAfterAction = false;
        _modalButtons.Add(saveBtnModel);
        _modalButtons.Add(new (
            "Cancel",
            null,
            BootstrapColorType.Light
        ));
        
        var applications = await _apiService.GetApplications(new GetListRequest()
        {
            Page = 1
        });
    }
    
    private Task HandleSubmit()
    {
        var isValid = _editContext.Validate();
        if (isValid)
        {
            try
            {
                _toastService.AddMessage(ToastMessageType.Error, "Test error");
            }
            catch (Exception e)
            {
                
                Console.WriteLine(e.Message);
            }
        }
        return Task.CompletedTask;
    }
    
    private void OnAddAction()
    {
        _btnSubmit.Click();
    }
}
