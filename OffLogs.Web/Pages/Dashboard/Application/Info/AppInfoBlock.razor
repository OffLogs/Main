@using OffLogs.Web.Services.Http
@using OffLogs.Web.Core.Models.Modal
@using OffLogs.Web.Constants
@using OffLogs.Web.Resources
@using OffLogs.Api.Common.Dto.Entities
@using OffLogs.Web.Constants.Bootstrap
@inject IApiService _apiService
@inject ToastService _toastService

@if (_isLoading)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
}
else
{
    <div class="m-3">
        <h3 class="h5">@_title</h3>
        <div>@CommonResources.Name</div>
        <b>@_application.Name</b>
        <div class="mt-3">API Token</div>
        <b class="text-break">@_application.ApiToken</b>
    </div>
}

@code {

    [Parameter]
    public long? ApplicationId { get; set; }

    private bool _isLoading { get; set; }
    private ApplicationDto _application { get; set; }

    private string _title
    {
        get
        {
            if (_application != null)
            {
                return _application.Name;
            }
            return "Application info";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        _isLoading = false;
        if (ApplicationId == null)
        {
            _application = null;
            return;
        }
        if (ApplicationId != _application?.Id)
        {
            await LoadApplicationAsync();
        }
    }

    protected async Task LoadApplicationAsync()
    {
        if (!ApplicationId.HasValue)
        {
            _application = null;
            return;
        }
        _isLoading = true;
        try
        {
            _application = await _apiService.GetApplicationAsync(ApplicationId.Value);
            if (_application == null)
            {
                _toastService.AddInfoMessage(CommonResources.Error_LogNotFound);
            }
        }
        catch (Exception e)
        {
            _toastService.AddServerErrorMessage();
            Console.WriteLine(e.Message, e);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

}
