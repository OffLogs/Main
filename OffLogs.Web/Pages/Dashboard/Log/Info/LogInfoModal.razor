@using OffLogs.Web.Services.Http
@using OffLogs.Api.Common.Dto.Entities
@using OffLogs.Web.Store.Log
@using Fluxor

@inherits BaseComponent

@inject IState<LogsListState> _state

<ModalWindow
    IsShow="IsShowAddModal"
    OnClose="@(async () => { await Task.Yield(); IsShowAddModal = false; })">
    @if (_log == null)
    {
        <Preloader/>
    }
    else
    {
        @_log?.Message    
    }
</ModalWindow>

@code
{
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool IsShowAddModal { get; set; }

    [Parameter]
    public long? LogId { get; set; }
    public long? _logId { get; set; }

    public LogDto _log => _state.Value.LogsDetails.FirstOrDefault(log => log.Id == LogId);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _logId = LogId;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (_logId != LogId)
        {
            _logId = LogId;
            await LoadLogAsync();
        }
    }

    protected async Task LoadLogAsync()
    {
        if (_logId.HasValue)
        {
            Dispatcher.Dispatch(new FetchLogAction(_logId.Value));
        }
    }
}
