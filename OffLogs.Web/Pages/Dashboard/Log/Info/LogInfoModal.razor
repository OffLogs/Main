@using OffLogs.Web.Services.Http
@using OffLogs.Business.Common.Models.Api.Request
@using OffLogs.Web.Shared.Modal
@using Microsoft.AspNetCore.Components
@using OffLogs.Business.Common.Models.Api.Response.Board
@using OffLogs.Web.Resources
@using OffLogs.Web.Services
@inject IApiService _apiService
@inject ToastService _toastService

<ModalWindow
    IsShow="IsShowAddModal"
    OnClose="@(async () => { await Task.Yield(); IsShowAddModal = false; })">
    @if (_isLoading)
    {
        <Preloader/>
    }
    else
    {
        @_log?.Message    
    }
</ModalWindow>

@code
{
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool IsShowAddModal { get; set; }

    [Parameter]
    public long? LogId { get; set; }
    public long? _logId { get; set; }

    private bool _isLoading { get; set; }
    private LogResponseModel _log { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _logId = LogId;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (_logId != LogId)
        {
            _logId = LogId;
            await LoadLogAsync();
        }
    }

    protected async Task LoadLogAsync()
    {
        _isLoading = true;
        try
        {
            if (!_logId.HasValue)
            {
                _log = null;
                return;
            }
            _log = await _apiService.GetLog(_logId.Value);
            if (_log == null)
            {
                _toastService.AddInfoMessage(Common.Error_LogNotFound);
                IsShowAddModal = false;
            }
        }
        catch (Exception e)
        {
            _toastService.AddServerErrorMessage();
            Console.WriteLine(e.Message, e);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
}
