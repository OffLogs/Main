@page "/dashboard/logs"
@using OffLogs.Web.Services.Http
@using OffLogs.Web.Pages.Dashboard.Log.Info
@using OffLogs.Web.Pages.Dashboard.Log.Parts
@using OffLogs.Business.Common.Constants
@using OffLogs.Business.Common.Extensions
@using OffLogs.Web.Constants
@using OffLogs.Web.Extensions
@using OffLogs.Api.Common.Dto.Entities
@using OffLogs.Api.Common.Dto.RequestsAndResponses.Board.Log
@inject IApiService _apiService
@inject ToastService _toastService

<h1>Logs</h1>

<div class="d-flex flex-row mb-3">
    <CustomAsyncDropDown @ref="_dropDownApplications"
                         Class="me-1"
                         NonSelectedLabel="Select your application"
                         OnLoad="@(async () => await OnLoadApplicationsAsync())"
                         OnChanged="@(async (item) => await OnSelectedApplication(item))" />
    <LogLevelsDropDown OnChanged="OnSelectLogLevelAsync" />
</div>

@if (_selectedApplicationId != null)
{
    <div>
        <OffLogs.Web.Shared.Components.LogStatisticChart ApplicationId="_selectedApplicationId.Value"/>
    </div>
}

@foreach (var log in _logs)
{
    <div class="accordion mb-1 w-log-block">
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button @onclick="@(() => ExpandOrCloseLog(log))"
                        class="accordion-button ms-4 @(_expandedLogIds.Contains(@log.Id) ? "collapsed" : "")"
                        type="button">

                    @log.LogTime.ToFullDateTime()
                    <Badge Color="@log.Level.GetBootstrapColorType()" Class="ms-2 me-2">
                        @log.Level.GetLabel()
                    </Badge>
                    @log.Message.Truncate(128)
                </button>
                @if (log.IsFavorite)
                {
                    <div class="w-favorite-icon">
                        <Icon IconType="favorite" Class="fs-6" />
                    </div>
                }
            </h2>
            <div class="accordion-collapse collapse @(_expandedLogIds.Contains(@log.Id) ? "show" : "")">
                <div class="accordion-body">
                    @if (_expandedLogIds.Contains(@log.Id))
                    {
                        <LogInfoBlock LogId="@log.Id" />
                    }
                </div>
            </div>
        </div>
    </div>
}

@if (_logs.Count == 0 && !_isLoading)
{
    <Alert Type="BootstrapColorType.Info">List is empty...</Alert>
}

<div class="mt-3 mb-5">
    @if (_isLoading)
    {
        <Preloader />
    }

    @if (_isHasMore && !_isLoading)
    {
        <div class="text-center">
            <MyButton OnClick="@(async () => await LoadListAsync())">
                More
            </MyButton>
        </div>
    }
</div>

<LogInfoModal IsShowAddModal="@(_selectedLog != null)" LogId="@_selectedLog?.Id" />

@code
{
    private CustomAsyncDropDown _dropDownApplications;
    private List<LogListItemDto> _logs = new();
    private int _currentPage = 1;
    private bool _isHasMore = false;
    private LogListItemDto _selectedLog = null;
    private List<long> _expandedLogIds = new();

    private long? _selectedApplicationId;
    private LogLevel? _selectedLogLevel;

    private bool _isLoading = false;

    private ICollection<CustomTableRowModel> _tableCols = new List<CustomTableRowModel>()
{
        new(){ Name = "Message" },
        new(){ Name = "Log time" },
        new(){ Name = "Create time" }
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task LoadListAsync(bool isLoadNextPage = true)
    {
        if (!_selectedApplicationId.HasValue)
        {
            return;
        }
        _isLoading = true;
        if (isLoadNextPage)
        {
            _currentPage++;
        }
        else
        {
            _logs.Clear();
            _currentPage = 1;
        }
        try
        {
            var response = await _apiService.GetLogsAsync(new GetListRequest()
            {
                ApplicationId = _selectedApplicationId.Value,
                Page = _currentPage,
                LogLevel = _selectedLogLevel
            });
            _logs = _logs.Concat(response.Items).ToList();
            _isHasMore = response.IsHasMore;
        }
        catch (Exception e)
        {
            _toastService.AddServerErrorMessage();
            Console.WriteLine(e.Message, e);
        }
        finally
        {
            _isLoading = false;
        }
        StateHasChanged();
    }

    private Task OnClickRowAsync(LogListItemDto log)
    {
        _selectedLog = log;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnMoreAsyncAsync()
    {
        await LoadListAsync();
    }

    private async Task OnSelectedApplication(DropDownListItem selectListItem)
    {
        _selectedApplicationId = selectListItem.IdAsLong;
        await LoadListAsync(false);
    }

    private async Task<ICollection<DropDownListItem>> OnLoadApplicationsAsync()
    {
        _isLoading = true;
        try
        {
            var response = await _apiService.GetApplicationsAsync();
            return response.Items.Select(record => new DropDownListItem()
            {
                Id = $"{record.Id}",
                Label = record.Name
            }).ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message, e);
        }
        finally
        {
            _isLoading = false;
        }
        StateHasChanged();
        return default;
    }

    private void ExpandOrCloseLog(LogListItemDto log)
    {
        if (_expandedLogIds.Contains(log.Id))
        {
            _expandedLogIds.Remove(log.Id);
        }
        else
        {
            _expandedLogIds.Add(log.Id);
        }
        StateHasChanged();
    }

    private async Task OnSelectLogLevelAsync(LogLevel level)
    {
        _selectedLogLevel = null;
        if (level != default)
        {
            _selectedLogLevel = level;
        }
        StateHasChanged();
        await LoadListAsync(false);
    }
}
