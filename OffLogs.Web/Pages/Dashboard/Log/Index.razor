@page "/dashboard/logs"
@using OffLogs.Web.Services.Http
@using OffLogs.Web.Pages.Dashboard.Log.Info
@using OffLogs.Web.Pages.Dashboard.Log.Parts
@using OffLogs.Business.Common.Models.Api.Request.Board
@using OffLogs.Business.Common.Models.Api.Response.Board
@using System.Collections
@using Bunit.Extensions
@using OffLogs.Business.Common.Constants
@using OffLogs.Business.Common.Extensions
@using OffLogs.Web.Constants
@using OffLogs.Web.Extensions
@inject IApiService _apiService
@inject ToastService _toastService

<h1>Logs</h1>

<CustomAsyncDropDown
    @ref="_dropDownApplications"
    NonSelectedLabel="Select your application"
    OnLoad="@(async () => await OnLoadApplicationsAsync())"
    OnChanged="@(async (item) => await OnSelectedApplication(item))"
/>

@foreach (var log in _logs)
{
    <div class="accordion mb-1 w-log-block">
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button
                    @onclick="@(() => ExpandOrCloseLog(log))"
                    class="accordion-button @(_expandedLogIds.Contains(@log.Id) ? "collapsed" : "")"
                    type="button">
                    <Badge Color="@log.Level.GetBootstrapColorType()" Class="me-2">
                        @log.Level.GetLabel()
                    </Badge>
                    @log.Message.Truncate(128)
                </button>
            </h2>
            <div class="accordion-collapse collapse @(_expandedLogIds.Contains(@log.Id) ? "show" : "")">
                <div class="accordion-body">
                    @if (_expandedLogIds.Contains(@log.Id))
                    {
                        <LogInfoBlock LogId="@log.Id" />
                    }
                </div>
            </div>
        </div>
    </div>  
}

@if (_isHasMore)
{
    <div class="text-center">
        <MyButton
            Class="mt-3 mb-5"
            OnClick="@(async () => await LoadListAsync())">
            More
        </MyButton>
    </div>
}

<LogInfoModal IsShowAddModal="@(_selectedLog != null)" LogId="@_selectedLog?.Id"/>

@code
{
    private CustomAsyncDropDown _dropDownApplications;
    private List<LogResponseModel> _logs = new();
    private int _currentPage = 1;
    private bool _isHasMore = false;
    private long? _selectedApplicationId;
    private LogResponseModel _selectedLog = null;
    private List<long> _expandedLogIds = new();

    private bool _isLoading = false;

    private ICollection<CustomTableRowModel> _tableCols = new List<CustomTableRowModel>()
    {
        new(){ Name = "Message" },
        new(){ Name = "Log time" },
        new(){ Name = "Create time" }
    };
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // _dropDownApplications.SetSelectedItemId($"{_selectedApplicationId}");
    }

    private async Task LoadListAsync(bool isLoadNextPage = true)
    {
        if (!_selectedApplicationId.HasValue)
        {
            return;
        }
        _isLoading = true;
        if (isLoadNextPage)
        {
            _currentPage++;
        }
        else
        {
            _logs.Clear();
            _currentPage = 1;
        }
        try
        {
            var response = await _apiService.GetLogs(new LogListRequestModel()
            {
                ApplicationId = _selectedApplicationId.Value,
                Page = _currentPage
            });
            _logs = _logs.Concat(response.Items).ToList();
            _isHasMore = response.IsHasMore;
        }
        catch (Exception e)
        {
            _toastService.AddServerErrorMessage();
            Console.WriteLine(e.Message, e);
        }
        finally
        {
            _isLoading = false;
        }
        StateHasChanged();
    }

    private async Task OnClickRowAsync(LogResponseModel log)
    {
        _selectedLog = log;
        StateHasChanged();
    }

    private async Task OnMoreAsyncAsync()
    {
        await LoadListAsync();
    }
    
    private async Task OnSelectedApplication(DropDownListItem selectListItem)
    {
        _selectedApplicationId = selectListItem.IdAsLong;
        await LoadListAsync(false);
    }
    
    private async Task<ICollection<DropDownListItem>> OnLoadApplicationsAsync()
    {
        _isLoading = true;
        try
        {
            var response = await _apiService.GetApplications();
            return response.Items.Select(record => new DropDownListItem()
            {
                Id = $"{record.Id}",
                Label = record.Name
            }).ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message, e);
        }
        finally
        {
            _isLoading = false;
        }
        StateHasChanged();
        return default;
    }

    private void ExpandOrCloseLog(LogResponseModel log)
    {
        if (_expandedLogIds.Contains(log.Id))
        {
            _expandedLogIds.Remove(log.Id);
        }
        else
        {
            _expandedLogIds.Add(log.Id);
        }
        StateHasChanged();
    }
}
