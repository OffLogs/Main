@page "/dashboard/logs"
@using OffLogs.Web.Pages.Dashboard.Log.Info
@using OffLogs.Web.Pages.Dashboard.Log.Parts
@using OffLogs.Business.Common.Constants
@using OffLogs.Business.Common.Extensions
@using OffLogs.Web.Resources
@using OffLogs.Web.Shared.Ui.NavigationLayout

@inherits BaseComponent

<NavigationLayout
    MenuTitle="@LogResources.PageTitle"
    MenuItems="@_menuItems"
    BodyButtons="@_buttons"
    OnSelect="OnApplicationSelected"
>
    <BodyContent>
        @if (State.Value.SelectedApplicationId != null)
        {
            <AppInfoBlock ApplicationId="@State.Value.SelectedApplicationId"/>
        }
    </BodyContent>
</NavigationLayout>

<h1>Logs</h1>

<div class="d-flex flex-row mb-3">
    <CustomAsyncDropDown @ref="_dropDownApplications"
                         Class="me-1"
                         NonSelectedLabel="Select your application"
                         OnLoad="@(async () => await OnLoadApplicationsAsync())"
                         OnChanged="@(async (item) => await OnSelectedApplication(item))" />
    <LogLevelsDropDown OnChanged="OnSelectLogLevelAsync" />
</div>

@if (_selectedApplicationId != null)
{
    <div>
        <OffLogs.Web.Shared.Components.LogStatisticChart ApplicationId="_selectedApplicationId.Value"/>
    </div>
}

@foreach (var log in State.Value.List)
{
    <div class="accordion mb-1 w-log-block">
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button @onclick="@(() => ExpandOrCloseLog(log))"
                        class="accordion-button ms-5 @(_expandedLogIds.Contains(@log.Id) ? "collapsed" : "")"
                        type="button">

                    @log.LogTime.ToFullDateTime()
                    <Badge Color="@log.Level.GetBootstrapColorType()" Class="ms-2 me-2">
                        @log.Level.GetLabel()
                    </Badge>
                    @log.Message.Truncate(128)
                </button>
                <div class="w-favorite-icon">
                    <MyButton 
                        IsOutlined="true" 
                        IsSmall="true"
                        OnClick="async () => await OnClickIsFavoriteAsync(log)"
                    >
                        <Icon 
                            IconType="@(log.IsFavorite ? "favorite" : "favorite_border")"
                        />
                    </MyButton>
                </div>
            </h2>
            <div class="accordion-collapse collapse @(_expandedLogIds.Contains(@log.Id) ? "show" : "")">
                <div class="accordion-body">
                    @if (_expandedLogIds.Contains(@log.Id))
                    {
                        <LogInfoBlock LogId="@log.Id" />
                    }
                </div>
            </div>
        </div>
    </div>
}

@if (State.Value.List.Count == 0 && !State.Value.IsLoadingList)
{
    <Alert Type="BootstrapColorType.Info">List is empty...</Alert>
}

<div class="mt-3 mb-5">
    @if (State.Value.IsLoadingList)
    {
        <Preloader />
    }

    @if (State.Value.HasMoreItems && !State.Value.IsLoadingList)
    {
        <div class="text-center">
            <MyButton OnClick="@(async () => await LoadListAsync())">
                More
            </MyButton>
        </div>
    }
</div>

@* <LogInfoModal IsShowAddModal="@(_selectedLog != null)" LogId="@_selectedLog?.Id" /> *@
