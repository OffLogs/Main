@page "/dashboard/logs"
@using OffLogs.Web.Services.Http
@using OffLogs.Business.Common.Models.Api.Request.Board
@using OffLogs.Business.Common.Models.Api.Response.Board
@using OffLogs.Web.Shared.Ui.Form.CustomDropDown
@using OffLogs.Web.Shared.Ui
@using System.Collections
@inject IApiService _apiService

<h1>Logs</h1>

<Preloader/>

<CustomAsyncDropDown
    @ref="_dropDownApplications"
    NonSelectedLabel="Select your application"
    OnLoad="@(async () => await OnLoadApplicationsAsync())"
    OnChanged="@(async (item) => await OnSelectedApplication(item))"
/>

<table class="table table-hover w-table">
    <thead>
        <tr>
            <th>Message</th> 
            <th>Log time</th>
            <th>Create time</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var log in _logs)
    {
        <tr @onclick="OnClickRowAsync">
            <td>@log.Message</td>
            <td>@log.LogTime</td>
            <td>@log.CreateTime</td>
        </tr>    
    }
    </tbody>
</table>

@code
{
    private CustomAsyncDropDown _dropDownApplications;
    private List<LogResponseModel> _logs = new();
    private int _currentPage = 1;
    private long? _selectedApplicationId;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //_dropDownApplications.SetSelectedItemId($"{_selectedApplicationId}");
    }

    private async Task LoadListAsync(bool isLoadNextPage = true)
    {
        if (!_selectedApplicationId.HasValue)
        {
            return;
        }
        if (isLoadNextPage)
        {
            _currentPage++;
        }
        else
        {
            _currentPage = 1;
        }
        var response = await _apiService.GetLogs(new LogListRequestModel()
        {
            ApplicationId = _selectedApplicationId.Value,
            Page = _currentPage
        });
        _logs = response.Items.ToList();
        StateHasChanged();
    }

    private async Task OnClickRowAsync()
    {
        Console.WriteLine("asdads");
    }

    private async Task OnSelectedApplication(DropDownListItem selectListItem)
    {
        _selectedApplicationId = selectListItem.IdAsLong;
        await LoadListAsync(false);
    }
    
    private async Task<ICollection<DropDownListItem>> OnLoadApplicationsAsync()
    {
        var response = await _apiService.GetApplications();
        return response.Items.Select(record => new DropDownListItem()
        {
            Id = $"{record.Id}",
            Label = record.Name
        }).ToList();
    }
}
