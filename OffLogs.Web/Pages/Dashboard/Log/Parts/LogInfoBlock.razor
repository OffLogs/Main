@using OffLogs.Api.Common.Dto.Entities
@using Fluxor
@using OffLogs.Web.Resources
@using OffLogs.Web.Store.Log

@inherits BaseComponent

@inject IState<LogsListState> _state

@if (_log == null)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
}
else
{
    <div class="m-3">
        <h3 class="h5">@_log.Message</h3>
        <div class="mb-3">
            <div>@LogResources.LogTime</div>
            <b>@_log.LogTime.ToFullDateTime()</b>
            <div>@CommonResources.CreateTime</div>
            <b>@_log.CreateTime.ToFullDateTime()</b>
        </div>

        <h5>@LogResources.Properties</h5>
        <RadzenDataGrid
            TItem="KeyValuePair<string, string>"
            AllowSorting="false"
            Data="@_log.Properties"
            PageSize="10"
            AllowPaging="true"
            class="mb-3">

            <Columns>
                <RadzenDataGridColumn TItem="KeyValuePair<string, string>" Property="Key" Title="@CommonResources.Name"/>
                <RadzenDataGridColumn TItem="KeyValuePair<string, string>" Property="Value" Title="@CommonResources.Value"/>
            </Columns>
        </RadzenDataGrid>

        @if (@_log.Traces.Any())
        {
            <h5>@LogResources.Traces</h5>
            <RadzenDataGrid
                TItem="string"
                AllowSorting="false"
                Data="@_log.Traces"
                PageSize="10"
                AllowPaging="true"
                class="mb-3">

                <Columns>
                    <RadzenDataGridColumn TItem="string" Property="Value" Title="@CommonResources.Value"/>
                </Columns>
            </RadzenDataGrid>
        }
    </div>
}

@code {

    [Parameter]
    public long LogId { get; set; }

    public LogDto _log => _state.Value.LogsDetails.FirstOrDefault(log => log.Id == LogId);

    protected override Task OnInitializedAsync()
    {
        return Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (_log != null)
        {
            return;
        }
        Dispatcher.Dispatch(new FetchLogAction(LogId));
    }

}
