@using OffLogs.Web.Services.Http
@using OffLogs.Api.Common.Dto.Entities
@using Fluxor
@using OffLogs.Web.Store.Log
@using OffLogs.Web.Store.Log.Actions

@inherits BaseComponent

@inject IApiService _apiService
@inject ToastService _toastService
@inject IState<LogsListState> _state

@if (_log == null)
{
    <Preloader />
}
else
{
    <MyButton 
        IsOutlined="true" 
        IsSmall="true"
        OnClick="OnClickIsFavoriteAsync"
    >
        <Icon 
            IconType="@(_log.IsFavorite ? "favorite" : "favorite_border")"
        />
    </MyButton>
    <hr/>
    <div>
        <b>Time:</b> @_log.LogTime.ToFullDateTime()
    </div>
    <div>
        <b>Message:</b> @_log.Message
    </div>
    <div class="row mt-1">
        @if (_log.Properties.Any())
        {
            <div class="col-6">
                <b>Properties:</b>
                @foreach (var property in _log.Properties)
                {
                    <div>
                        <b>@property.Key:</b> @property.Value
                    </div>
                }
            </div>    
        }
        @if (_log.Traces.Any())
        {
            <div class="col-6">
                <b>Traces:</b>
                @foreach (var trace in _log.Traces)
                {
                    <div>@trace</div>
                }
            </div>
        }
    </div>    
}

@code {
    [Parameter]
    public long LogId { get; set; }

    public LogDto _log => _state.Value.LogsDetails.FirstOrDefault(log => log.Id == LogId);

    private bool _isLoading = false;

    protected override Task OnInitializedAsync()
    {
        if (_log != null)
        {
            return Task.CompletedTask;
        }
        Dispatcher.Dispatch(new FetchLogAction(LogId));
        return Task.CompletedTask;
    }

    private Task OnClickIsFavoriteAsync()
    {
        _log.IsFavorite = !_log.IsFavorite;
        Dispatcher.Dispatch(new SetIsLogFavoriteAction(_log.Id, _log.IsFavorite));
        return Task.CompletedTask;
    }
}
