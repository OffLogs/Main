@using ChartJs.Blazor
@using ChartJs.Blazor.BarChart
@using System.Drawing
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Handlers
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.Interop
@using ChartJs.Blazor.PieChart
@using System.Linq
@using System.Collections.Generic
@using ChartJs.Blazor.LineChart
@using OffLogs.Web.Services.Http
@using OffLogs.Api.Common.Requests.Board.Log
@using OffLogs.Business.Common.Constants
@using static SampleUtils
@inject IApiService _apiService
@inject ToastService _toastService

@if (_isLoading)
{
    <Preloader/>
}
else
{
    <Chart Config="_config" @ref="_chart"></Chart>
}

<button @onclick="LoadData">aaa</button>

@code {
    private bool _isLoading = false;
    private LogStatisticForNowDto _statistic = null;
    private int _chartLabelsCount = 0;

    private const int InitalCount = 7;
    private LineConfig _config;
    private Chart _chart;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        LoadData();

        _config = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "ChartJs.Blazor Line Chart"
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Hover = new Hover
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
            {
                        new CategoryAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Month"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
            {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Value"
                            }
                        }
                    }
                }
            }
        };
        //_chart.Update();
    }

    private void RandomizeData()
    {
        foreach (IDataset<int> dataset in _config.Data.Datasets)
        {
            int count = dataset.Count;
            dataset.Clear();
            foreach (var item in RandomScalingFactor(count))
            {
                dataset.Add(item);
            }
        }

        _chart.Update();
    }

    private void AddDataset()
    {
        string color = ColorUtil.FromDrawingColor(ChartColors.All[_config.Data.Datasets.Count % ChartColors.All.Count]);
        IDataset<int> dataset = new LineDataset<int>(RandomScalingFactor(_config.Data.Labels.Count))
        {
            Label = $"Dataset {_config.Data.Datasets.Count}",
            BackgroundColor = color,
            BorderColor = color,
            Fill = FillingMode.Disabled
        };

        _config.Data.Datasets.Add(dataset);
        _chart.Update();
    }

    private void RemoveDataset()
    {
        IList<IDataset> datasets = _config.Data.Datasets;
        if (datasets.Count == 0)
            return;

        datasets.RemoveAt(datasets.Count - 1);
        _chart.Update();
    }

    private void AddData()
    {
        if (_config.Data.Datasets.Count == 0)
            return;

        string month = Months[_config.Data.Labels.Count % Months.Count];
        _config.Data.Labels.Add(month);

        foreach (IDataset<int> dataset in _config.Data.Datasets)
        {
            dataset.Add(RandomScalingFactor());
        }

        _chart.Update();
    }

    private void RemoveData()
    {
        if (_config.Data.Datasets.Count == 0 ||
            _config.Data.Labels.Count == 0)
        {
            return;
        }

        _config.Data.Labels.RemoveAt(_config.Data.Labels.Count - 1);

        foreach (IDataset<int> dataset in _config.Data.Datasets)
        {
            dataset.RemoveAt(dataset.Count - 1);
        }

        _chart.Update();
    }

    private async Task LoadData()
    {
        _isLoading = true;
        try
        {
            _statistic = await _apiService.LogGetStatisticForNow(8);
            if (_statistic != null)
            {
                _chartLabelsCount = _statistic.GroupBy(i => i.LogLevel).Max(i => i.ToList().Count);
                RebuildChart();
            }
        }
        catch (Exception e)
        {
            _toastService.AddServerErrorMessage();
            Console.WriteLine(e.Message, e);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void RebuildChart()
    {
        _config.Data.Labels.Clear();
        _config.Data.Datasets.Clear();
        foreach (LogLevel logLevel in (LogLevel[])Enum.GetValues(typeof(LogLevel)))
        {
            if (!_statistic.Any(i => i.LogLevel == logLevel))
            {
                continue;
            }
            LineDataset<long> dataset = new LineDataset<long>()
            {
                Label = logLevel.GetLabel(),
                BackgroundColor = ColorUtil.FromDrawingColor(GetLevelColor(logLevel)),
                BorderColor = ColorUtil.FromDrawingColor(GetLevelColor(logLevel)),
                Fill = FillingMode.Disabled
            };
            var levelCounters = _statistic.Where(s => s.LogLevel == logLevel).Select(i => i.Count).ToList();
            dataset.AddRange(levelCounters);
            _config.Data.Datasets.Add(dataset);
        }
        for (int i = 1; i <= _chartLabelsCount; i++)
        {
            _config.Data.Labels.Add(i.ToString());
        }

        _chart?.Update();
    }

    private Color GetLevelColor(LogLevel level)
    {
        if (level == LogLevel.Error)
            return ChartColors.Red;
        if (level == LogLevel.Warning)
            return ChartColors.Orange;
        if (level == LogLevel.Debug)
            return ChartColors.Yellow;
        if (level == LogLevel.Fatal)
            return ChartColors.Red;
        if (level == LogLevel.Information)
            return ChartColors.Blue;
        return ChartColors.Purple;
    }
}
