@using OffLogs.Web.Core.Extensions
@using OffLogs.Web.Core.Constants
@using OffLogs.Web.Services
@using OffLogs.Web.Shared.Ui.Toast
@inject IAuthorizationService _authService
@inject NavigationManager _navigationManager
@inject ToastService _toastService
@inherits LayoutComponentBase

<div class="page">
    
    @if (_isShowMainMenu)
    {
        <div class="sidebar">
            <NavMenu/>
        </div>    
    }

    <div class="main">
        @if (_isShowMainMenu)
        {
            <div class="top-row px-4">
                <a 
                    @onClick="OnLogout"
                    href="#"
                    class="ml-md-auto"
                >
                    Logout
                </a>
            </div>  
        }

        <div class="content px-4">
            @Body
        </div>
        <ToastMessageContainer/>
    </div>
</div>

@code {
    private bool _isLoggedIn = false;

    private bool _isShowMainMenu = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _navigationManager.LocationChanged += (sender, args) =>
        {
            CheckIsLoggedInAndRedirect();    
        };

        await _authService.CheckIsLoggedInAsync();
        CheckIsLoggedInAndRedirect();
    }

    private void CheckIsLoggedInAndRedirect()
    {
        _isLoggedIn = _authService.IsLoggedIn();
        if (!_isLoggedIn && !_navigationManager.GetPath().StartsWith("/login"))
        {
            _navigationManager.NavigateTo("/login");
        }
        _isShowMainMenu = _isLoggedIn && _navigationManager.GetPath().StartsWith(SiteUrl.Dashboard);
        StateHasChanged();
    }

    private async Task OnLogout()
    {
        await _authService.LogoutAsync();
        _navigationManager.NavigateTo("/");
        CheckIsLoggedInAndRedirect();
    }

}
