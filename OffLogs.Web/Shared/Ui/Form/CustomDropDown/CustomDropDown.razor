@using OffLogs.Web.Core.Models.Toast
@using System.Timers
@using System.Collections
@using OffLogs.Web.Constants
@using OffLogs.Web.Constants.Bootstrap
@using OffLogs.Web.Core.Helpers
@using OffLogs.Web.Services.Events

@implements IDisposable

@inject ToastService _toastService

<div class="w-custom-drop-down @Class">
     @if (!string.IsNullOrEmpty(Label))
    {
        <label class="form-label">@Label</label>
    }
     <div class="btn-group">
         <MyButton
             OnClick="@(() => ShowDropDown(!_isOpened))"
             Type="@BtnType"
             IsSmall="@(Size == FormControlSize.Small)"
         >
             @_selectedItemTitle
         </MyButton>
         <div class="dropdown-menu @(_isOpened ? "show" : "")">
             @foreach (var item in Items)
             {
                 <a class="dropdown-item @(item.IsSelected ? "active" : "")"
                    href="#"
                    @onclick="@(async () => await OnClickSelectItemAsync(item))"
                    @onclick:preventDefault="true"
                    @onclick:stopPropagation>
                     @item.Label
                 </a>
             }
             @if (!Items.Any())
             {
                 <a class="dropdown-item"
                    href="#"
                    @onclick:preventDefault="true">
                     Items not found
                 </a>
             }
         </div>
         @if (_isOpened)
         {
             <div class="w-transparent-back" @onclick="@(() => { ShowDropDown(!_isOpened); })"></div>
         }
     </div>
</div>

@code {
    [Parameter]
    public string Label { get; set; } = "";
    
    [Parameter]
    public string Class { get; set; } = "";
    
    [Parameter]
    public string NonSelectedLabel { get; set; } = "Select item";

    [Parameter]
    public ICollection<DropDownListItem> Items { get; set; } = new List<DropDownListItem>();

    [Parameter]
    public ColorType BtnType { get; set; } = ColorType.Primary;

    [Parameter]
    public FormControlSize Size { get; set; } = FormControlSize.Medium;
    
    [Parameter]
    public string SelectedItemId
    {
        get => _selectedItemId;
        set
        {
            if (value != SelectedItem?.Id)
            {
                SetSelectedItemId(value, false);
            }
            _selectedItemId = value;
        }
    }
    private string _selectedItemId;

    [Parameter]
    public EventCallback<DropDownListItem> OnChanged { get; set; }

    public DropDownListItem SelectedItem = null;

    protected bool _isOpened { get; set; } = false;

    private static Action _onGlobalDropDownClose;

    protected string _selectedItemTitle
    {
        get
        {
            if (SelectedItem != null)
            {
                return SelectedItem.Label;
            }
            return NonSelectedLabel;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        SelectedItem = Items.FirstOrDefault(item => item.IsSelected);
        _onGlobalDropDownClose -= OnCloseModalFromOthers;
    }

    public void Dispose()
    {
        _onGlobalDropDownClose -= OnCloseModalFromOthers;
    }

    public void AddItem(DropDownListItem item)
    {
        Items.Add(item);
        StateHasChanged();
    }

    public void AddItems(ICollection<DropDownListItem> items)
    {
        Items = Items.Union(items).ToList();
        StateHasChanged();
    }

    public void SetSelectedItem(DropDownListItem item)
    {
        SetSelectedItemId(item?.Id);
    }

    public void SetSelectedItemId(string id, bool isInvoke = true)
    {
        SelectedItem = Items.FirstOrDefault(record => record.Id == id);
        Items = Items.Select(record =>
        {
            record.IsSelected = record == SelectedItem;
            return record;
        }).ToList();
        StateHasChanged();
        
        if (isInvoke && OnChanged.HasDelegate)
        {
            OnChanged.InvokeAsync(SelectedItem);    
        }
    }

    public void Clear()
    {
        Items.Clear();
        StateHasChanged();
    }

    protected Task OnClickSelectItemAsync(DropDownListItem item)
    {
        _isOpened = false;
        SetSelectedItem(item);
        return Task.CompletedTask;
    }

    protected void ShowDropDown(bool isShow)
    {
        if (!isShow)
        {
            _onGlobalDropDownClose?.Invoke();
        }
        _isOpened = isShow;
        StateHasChanged();
    }

    private void OnCloseModalFromOthers()
    {
        _isOpened = false;
    }
}
