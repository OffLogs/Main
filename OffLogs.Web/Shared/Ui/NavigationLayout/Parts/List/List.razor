@using OffLogs.Web.Shared.Ui.NavigationLayout.Models
@using OffLogs.Web.Resources
@using OffLogs.Web.Constants.Bootstrap
@using OffLogs.Api.Common.Dto
@using OffLogs.Web.Core.Helpers

<div class="w-list-container">
    <Header Buttons="@Buttons"></Header>
    <div class="w-list">
        <ul>
            @if (ListItems != null && ListItems.Any())
            {
                <Virtualize Items="@ListItems" Context="listItem">
                    <ItemContent>
                        <li
                            @onclick="@(() => OnSelectMenuItem(listItem))"
                            class="@GetItemClass(listItem)">
                            <span class="w-title">
                                <span class="@GetItemTitleClass(listItem)">
                                    @listItem.Title
                                </span>
                            </span>
                            <span class="w-title-2">
                                @listItem.RightTitle
                            </span>
                            @if (!string.IsNullOrEmpty(listItem.SubTitle))
                            {
                                <span class="w-sub-title">
                                    @listItem.SubTitle
                                </span>    
                            }
                        </li>
                    </ItemContent>
                    <Placeholder>
                        <Preloader/>
                    </Placeholder>
                </Virtualize>
            }
            else
            {
                <li>
                    <span class="w-sub-title">
                        @CommonResources.ListIsEmpty
                    </span>
                </li>
            }
        </ul>
    </div>
    @if (IsShowMoreBtn)
    {
        <div class="w-list-paginator">
            <div
                class="w-paginator-btn"
                @onclick="OnClickMore">
                @if (IsLoading)
                {
                    <Preloader/>
                }
                else
                {
                    <Icon Name="refresh"></Icon>
                    <span class="w-text">
                        @CommonResources.LoadMore
                    </span>    
                }
            </div>
        </div>    
    }
</div>

@code {

    [CascadingParameter(Name = "Layout")]
    public NavigationLayout Layout { get; set; }

    [Parameter]
    public ListItem SelectedItem { get; set; }

    [Parameter]
    public ICollection<ListItem> ListItems { get; set; }

    [Parameter]
    public bool IsShowMoreBtn { get; set; }
    
    [Parameter]
    public ICollection<HeaderMenuButton> Buttons { get; set; } = new List<HeaderMenuButton>();

    [Parameter]
    public bool IsReadOnly { get; set; }
    
    [Parameter]
    public bool IsLoading { get; set; }
    
    protected override Task OnInitializedAsync()
    {
        Buttons.Add(
            new HeaderMenuButton("Select", "check-alt")
        );
        return Task.CompletedTask;
    }

    private void OnSelectMenuItem(ListItem menuItem)
    {
        if (IsReadOnly)
        {
            return;
        }
        Layout.SelectItem(menuItem);
    }

    private string GetItemClass(ListItem menuItem)
    {
        var classes = "";
        var isSelected = SelectedItem?.Id == menuItem.Id;
        classes += isSelected ? "w-selected" : "";
        return classes;
    }
    
    private string GetItemTitleClass(ListItem menuItem)
    {
        var result = "p-2";
        if (menuItem.TitleColorType != null)
        {
            result += $" bg-{menuItem.TitleColorType.Value.GetBadgeClass()}";
        }

        return result;
    }

    private void OnClickMore()
    {
        if (IsReadOnly || IsLoading)
        {
            return;
        }
        InvokeAsync(async () => await Layout.OnClickMoreBtn.InvokeAsync());
    }
}
