@using OffLogs.Web.Shared.Ui.NavigationLayout.Models

<div class="w-header">
    @foreach (var button in Buttons)
    {
        <div class="@GetButtonClass(button)" @onclick="@(async () => await OnClickMenuButtonAsync(button))">
            <i class="icofont-@button.Icon"></i>
            <div>@button.Title</div>
            @if (HasPopup(button)) 
            {
                @if (visiblePopupId == button.Id)
                {
                    <div class="dropdown-container">
                        <div class="w-background" 
                             @onclick="@(async () => await CloseAsync())"
                        ></div>
                        <div class="w-arrow"></div>
                        <ul class="dropdown-menu show">
                            @foreach (var popupItem in button.PopupItems)
                            {
                                <li>
                                    <a class="dropdown-item"
                                       href="#"
                                       @onclick:preventDefault
                                       @onclick="@(async () => await EmitButtonEventAsync(button))"
                                    >
                                        @popupItem.Title
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>
                }
            }
        </div>    
    }
</div>

@code {

    [CascadingParameter(Name = "Layout")]
    public NavigationLayout Layout { get; set; }

    [Parameter]
    public ICollection<HeaderMenuButton> Buttons { get; set; } = new List<HeaderMenuButton>();

    [Parameter]
    public string MenuTitle { get; set; }

    private int? visiblePopupId { get; set; }

    private async Task OnClickMenuButtonAsync(HeaderMenuButton button)
    {
        if (button.IsDisabled)
        {
            return;
        }
        if (HasPopup(button))
        {
            visiblePopupId = button.Id;
            return;
        }
        await EmitButtonEventAsync(button);
    }

    private async Task EmitButtonEventAsync(HeaderMenuButton button)
    {
        await CloseAsync();
        if (button.OnClick.HasValue)
        {
            await button.OnClick.Value.InvokeAsync();
        }
    }
    
    private Task CloseAsync()
    {
        visiblePopupId = null;
        return Task.CompletedTask;
    }

    private bool HasPopup(HeaderMenuButton button)
    {
        return button.PopupItems != null && button.PopupItems.Count > 0;
    }
    
    private string GetButtonClass(HeaderMenuButton button)
    {
        var result = "w-button";
        if (button.IsDisabled)
        {
            result += " w-disabled";
        }
        return result;
    }
}
