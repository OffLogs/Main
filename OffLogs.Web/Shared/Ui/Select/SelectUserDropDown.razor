@using System.Threading
@using OffLogs.Web.Services.Http
@using OffLogs.Api.Common.Dto.RequestsAndResponses.Board.User
@using Microsoft.Extensions.Logging;
@inject ILogger<SelectUserDropDown> _logger
@inject IApiService _apiService

<input class="form-control"
       type="text"
       placeholder="Default input"
       @bind:event="oninput"
       @bind="SearchString">

@code {
    private bool _isLoading;
    private bool _isQueued;

    private string _searchString;
    private string SearchString
    {
        get => _searchString;
        set
        {
            _searchString = value;
            InvokeAsync(async () => await UpdateDropDownAsync());
        }
    }

    private UsersListDto _users;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }

    private async Task UpdateDropDownAsync()
    {
        if (string.IsNullOrEmpty(SearchString) || SearchString.Length <= 2)
        {
            _users = new UsersListDto();
            return;
        }

        await LoadListAsync();
    }

    private async Task LoadListAsync()
    {
        if (_isLoading)
        {
            _isQueued = true;
            return;
        }

        do
        {
            _isLoading = true;
            _isQueued = false;
            try
            {
                _users = await _apiService.FindUsers(SearchString);
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message, e);
            }
            finally
            {
                _isLoading = false;
            }
        }
        while (_isQueued);
        await InvokeAsync(StateHasChanged);
    }
}
